//Parent and Child processes communicating via shared memory

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
int main(void)
{
int shmid;
char *shmPtr;
int n;
if (fork( ) == 0)
{
sleep(5); /* UUPS */
if( (shmid = shmget(2041, 32, 0)) == -1 )
{

exit(1);
}
shmPtr = shmat(shmid, 0, 0);
if (shmPtr == (char *) -1)
exit(2);
printf ("\nChild Reading ....\n\n");
for (n = 0; n < 26; n++)
putchar(shmPtr[n]);
putchar('\n'); }
else
{
if( (shmid = shmget(2041, 32, 0666 | IPC_CREAT)) == -1 )
{
exit(1);
}
shmPtr = shmat(shmid, 0, 0);
if (shmPtr == (char *) -1)
exit(2);
for (n = 0; n < 26; n++)
shmPtr[n] = 'a' + n;
printf ("Parent Writing ....\n\n") ;
for (n = 0; n < 26; n++)
putchar(shmPtr[n]);
putchar('\n'); wait(NULL);
shmdt(NULL);
if( shmctl(shmid, IPC_RMID, NULL) == -1 )
{
perror("shmctl");
exit(-1);
}
}
exit(0);
}

//3 Process writing and reading

/* process1.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
/*
* We'll name our shared memory segment
* "5678".
*/
key = 5678;
/*
* Create the
segment. */
if ((shmid = shmget(key, SHMSIZE, IPC_CREAT | 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*
* Now put 1 in first
place */
s=shm;
*s++='1';
*s=NULL;
printf("Process1:- I have put the message %s\n",shm);
/*
* Finally, we wait until the other process

* changes the first character of our memory
*/
while (*shm != '2' && *shm+6 != 'o')
sleep(1);
printf("Process1:- Process2 has put the message
%s\n",shm); while (*shm != '3' && *shm+7 != 'y')
sleep(1);
printf("Process1:- Process3 has put the message %s\n",shm);
printf("Process1:- I am quiting\n");
exit(0);
}
/* process2.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm;
/*
* We'll name our shared memory segment.
*/
key = 5678;
/*
* Create the segment.
*/
if ((shmid = shmget(key, SHMSIZE, 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*

* Now put 1 in first
place */
*shm++='2';
*shm++=' ';
*shm++='h';
*shm++='e';
*shm++='l';
*shm++='l';
*shm++='o';
*shm = NULL;
exit(0);
}
/* process3.c */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#define SHMSIZE 27
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
/*
* We'll name our shared memory segment.
*/
key = 5678;
/*
* Create the
segment. */
if ((shmid = shmget(key, SHMSIZE, 0666)) < 0)
{ perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1)
{ perror("shmat");
exit(1);
}
/*
* Now put 1 in first place

*/
*shm++='3';
*shm++=' ';
*shm++='m';
*shm++='e';
*shm++='m';
*shm++='o';
*shm++='r';
*shm++='y';
*shm = NULL;
exit(0);
}

//shm qp 2

#include <stdio.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    printf("hi");

    int shm_id, shm_id1, shm_id2;
    int *shm_ptr, *shm_ptr1, *shm_ptr2;

    printf("hi");

    // Create shared memory segments
    shm_id = shmget(ftok(".", 'a'), 10 * sizeof(int), IPC_CREAT | 0666);
    shm_ptr = (int *)shmat(shm_id, NULL, 0);

    shm_id1 = shmget(ftok(".", 'b'), sizeof(int), IPC_CREAT | 0666);
    shm_ptr1 = (int *)shmat(shm_id1, NULL, 0);

    int fd1, fd2;
    fd1 = fork();

    printf("hi");

    int *s = shm_ptr;
    for (int i = 0; i < 10; i++) {
        *(s + i) = ((i * 17) + 1) % 10;
    }

    if (fd1 == 0) {
        s = shm_ptr;
        int min = *s;
        for (int i = 1; i < 10; i++) {
            if (*(s + i) < min)
                min = *(s + i);
        }
        s = shm_ptr1;
        *s = min;
        shmdt(shm_ptr);
        exit(0);
    } else {
        wait(NULL);
        shm_id2 = shmget(ftok(".", 'c'), sizeof(int), IPC_CREAT | 0666);
        shm_ptr2 = (int *)shmat(shm_id2, NULL, 0);
        fd2 = fork();
        if (fd2 == 0) {
            s = shm_ptr;
            int max = *s;
            for (int i = 1; i < 10; i++) {
                if (*(s + i) > max)
                    max = *(s + i);
            }
            s = shm_ptr2;
            *s = max;
            shmdt(shm_ptr);
            exit(0);
        } else {
            wait(NULL);
            int min = *shm_ptr1, max = *shm_ptr2;
            printf("\nMinimum is: %d", min);
            printf("\nMaximum is: %d");
            shmdt(shm_ptr);
            shmdt(shm_ptr1);
            shmdt(shm_ptr2);
            shmctl(shm_id, IPC_RMID, NULL);
            shmctl(shm_id1, IPC_RMID, NULL);
            shmctl(shm_id2, IPC_RMID, NULL);
        }
    }

    return 0;
}

Shm pbsheet q2
